/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lsp.liferay.portlet.socialliving.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import org.lsp.liferay.portlet.socialliving.model.EventEntry;
import org.lsp.liferay.portlet.socialliving.service.ChannelEntryLocalService;
import org.lsp.liferay.portlet.socialliving.service.EventEntryLocalService;
import org.lsp.liferay.portlet.socialliving.service.EventEntryService;
import org.lsp.liferay.portlet.socialliving.service.EventRegistrationLocalService;
import org.lsp.liferay.portlet.socialliving.service.persistence.ChannelEntryPersistence;
import org.lsp.liferay.portlet.socialliving.service.persistence.EventEntryPersistence;
import org.lsp.liferay.portlet.socialliving.service.persistence.EventRegistrationPersistence;

import javax.sql.DataSource;

/**
 * The base implementation of the event entry remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.lsp.liferay.portlet.socialliving.service.impl.EventEntryServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see org.lsp.liferay.portlet.socialliving.service.impl.EventEntryServiceImpl
 * @see org.lsp.liferay.portlet.socialliving.service.EventEntryServiceUtil
 * @generated
 */
public abstract class EventEntryServiceBaseImpl extends BaseServiceImpl
	implements EventEntryService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.lsp.liferay.portlet.socialliving.service.EventEntryServiceUtil} to access the event entry remote service.
	 */

	/**
	 * Returns the channel entry local service.
	 *
	 * @return the channel entry local service
	 */
	public ChannelEntryLocalService getChannelEntryLocalService() {
		return channelEntryLocalService;
	}

	/**
	 * Sets the channel entry local service.
	 *
	 * @param channelEntryLocalService the channel entry local service
	 */
	public void setChannelEntryLocalService(
		ChannelEntryLocalService channelEntryLocalService) {
		this.channelEntryLocalService = channelEntryLocalService;
	}

	/**
	 * Returns the channel entry persistence.
	 *
	 * @return the channel entry persistence
	 */
	public ChannelEntryPersistence getChannelEntryPersistence() {
		return channelEntryPersistence;
	}

	/**
	 * Sets the channel entry persistence.
	 *
	 * @param channelEntryPersistence the channel entry persistence
	 */
	public void setChannelEntryPersistence(
		ChannelEntryPersistence channelEntryPersistence) {
		this.channelEntryPersistence = channelEntryPersistence;
	}

	/**
	 * Returns the event entry local service.
	 *
	 * @return the event entry local service
	 */
	public EventEntryLocalService getEventEntryLocalService() {
		return eventEntryLocalService;
	}

	/**
	 * Sets the event entry local service.
	 *
	 * @param eventEntryLocalService the event entry local service
	 */
	public void setEventEntryLocalService(
		EventEntryLocalService eventEntryLocalService) {
		this.eventEntryLocalService = eventEntryLocalService;
	}

	/**
	 * Returns the event entry remote service.
	 *
	 * @return the event entry remote service
	 */
	public EventEntryService getEventEntryService() {
		return eventEntryService;
	}

	/**
	 * Sets the event entry remote service.
	 *
	 * @param eventEntryService the event entry remote service
	 */
	public void setEventEntryService(EventEntryService eventEntryService) {
		this.eventEntryService = eventEntryService;
	}

	/**
	 * Returns the event entry persistence.
	 *
	 * @return the event entry persistence
	 */
	public EventEntryPersistence getEventEntryPersistence() {
		return eventEntryPersistence;
	}

	/**
	 * Sets the event entry persistence.
	 *
	 * @param eventEntryPersistence the event entry persistence
	 */
	public void setEventEntryPersistence(
		EventEntryPersistence eventEntryPersistence) {
		this.eventEntryPersistence = eventEntryPersistence;
	}

	/**
	 * Returns the event registration local service.
	 *
	 * @return the event registration local service
	 */
	public EventRegistrationLocalService getEventRegistrationLocalService() {
		return eventRegistrationLocalService;
	}

	/**
	 * Sets the event registration local service.
	 *
	 * @param eventRegistrationLocalService the event registration local service
	 */
	public void setEventRegistrationLocalService(
		EventRegistrationLocalService eventRegistrationLocalService) {
		this.eventRegistrationLocalService = eventRegistrationLocalService;
	}

	/**
	 * Returns the event registration persistence.
	 *
	 * @return the event registration persistence
	 */
	public EventRegistrationPersistence getEventRegistrationPersistence() {
		return eventRegistrationPersistence;
	}

	/**
	 * Sets the event registration persistence.
	 *
	 * @param eventRegistrationPersistence the event registration persistence
	 */
	public void setEventRegistrationPersistence(
		EventRegistrationPersistence eventRegistrationPersistence) {
		this.eventRegistrationPersistence = eventRegistrationPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return EventEntry.class;
	}

	protected String getModelClassName() {
		return EventEntry.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eventEntryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ChannelEntryLocalService.class)
	protected ChannelEntryLocalService channelEntryLocalService;
	@BeanReference(type = ChannelEntryPersistence.class)
	protected ChannelEntryPersistence channelEntryPersistence;
	@BeanReference(type = EventEntryLocalService.class)
	protected EventEntryLocalService eventEntryLocalService;
	@BeanReference(type = EventEntryService.class)
	protected EventEntryService eventEntryService;
	@BeanReference(type = EventEntryPersistence.class)
	protected EventEntryPersistence eventEntryPersistence;
	@BeanReference(type = EventRegistrationLocalService.class)
	protected EventRegistrationLocalService eventRegistrationLocalService;
	@BeanReference(type = EventRegistrationPersistence.class)
	protected EventRegistrationPersistence eventRegistrationPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private EventEntryServiceClpInvoker _clpInvoker = new EventEntryServiceClpInvoker();
}