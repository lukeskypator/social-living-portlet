/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lsp.liferay.portlet.socialliving.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lsp.liferay.portlet.socialliving.model.EventEntry;
import org.lsp.liferay.portlet.socialliving.model.EventEntryModel;
import org.lsp.liferay.portlet.socialliving.model.EventEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventEntry service. Represents a row in the &quot;LSPSL_EventEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lsp.liferay.portlet.socialliving.model.EventEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventEntryImpl
 * @see org.lsp.liferay.portlet.socialliving.model.EventEntry
 * @see org.lsp.liferay.portlet.socialliving.model.EventEntryModel
 * @generated
 */
@JSON(strict = true)
public class EventEntryModelImpl extends BaseModelImpl<EventEntry>
	implements EventEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event entry model instance should use the {@link org.lsp.liferay.portlet.socialliving.model.EventEntry} interface instead.
	 */
	public static final String TABLE_NAME = "LSPSL_EventEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventEntryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "totalAttendees", Types.INTEGER },
			{ "maxAttendees", Types.INTEGER },
			{ "price", Types.DOUBLE },
			{ "thumbnailId", Types.BIGINT },
			{ "latitude", Types.VARCHAR },
			{ "longitude", Types.VARCHAR },
			{ "location", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LSPSL_EventEntry (eventEntryId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,startDate DATE null,endDate DATE null,totalAttendees INTEGER,maxAttendees INTEGER,price DOUBLE,thumbnailId LONG,latitude VARCHAR(75) null,longitude VARCHAR(75) null,location VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LSPSL_EventEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY eventEntry.startDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LSPSL_EventEntry.startDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lsp.liferay.portlet.socialliving.model.EventEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lsp.liferay.portlet.socialliving.model.EventEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lsp.liferay.portlet.socialliving.model.EventEntry"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long EVENTENTRYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventEntry toModel(EventEntrySoap soapModel) {
		EventEntry model = new EventEntryImpl();

		model.setEventEntryId(soapModel.getEventEntryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setTotalAttendees(soapModel.getTotalAttendees());
		model.setMaxAttendees(soapModel.getMaxAttendees());
		model.setPrice(soapModel.getPrice());
		model.setThumbnailId(soapModel.getThumbnailId());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setLocation(soapModel.getLocation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventEntry> toModels(EventEntrySoap[] soapModels) {
		List<EventEntry> models = new ArrayList<EventEntry>(soapModels.length);

		for (EventEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lsp.liferay.portlet.socialliving.model.EventEntry"));

	public EventEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _eventEntryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEventEntryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eventEntryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return EventEntry.class;
	}

	public String getModelClassName() {
		return EventEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventEntryId", getEventEntryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("totalAttendees", getTotalAttendees());
		attributes.put("maxAttendees", getMaxAttendees());
		attributes.put("price", getPrice());
		attributes.put("thumbnailId", getThumbnailId());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("location", getLocation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventEntryId = (Long)attributes.get("eventEntryId");

		if (eventEntryId != null) {
			setEventEntryId(eventEntryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer totalAttendees = (Integer)attributes.get("totalAttendees");

		if (totalAttendees != null) {
			setTotalAttendees(totalAttendees);
		}

		Integer maxAttendees = (Integer)attributes.get("maxAttendees");

		if (maxAttendees != null) {
			setMaxAttendees(maxAttendees);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Long thumbnailId = (Long)attributes.get("thumbnailId");

		if (thumbnailId != null) {
			setThumbnailId(thumbnailId);
		}

		String latitude = (String)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String longitude = (String)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}
	}

	@JSON
	public long getEventEntryId() {
		return _eventEntryId;
	}

	public void setEventEntryId(long eventEntryId) {
		_columnBitmask |= EVENTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalEventEntryId) {
			_setOriginalEventEntryId = true;

			_originalEventEntryId = _eventEntryId;
		}

		_eventEntryId = eventEntryId;
	}

	public long getOriginalEventEntryId() {
		return _originalEventEntryId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@JSON
	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	public int getTotalAttendees() {
		return _totalAttendees;
	}

	public void setTotalAttendees(int totalAttendees) {
		_totalAttendees = totalAttendees;
	}

	@JSON
	public int getMaxAttendees() {
		return _maxAttendees;
	}

	public void setMaxAttendees(int maxAttendees) {
		_maxAttendees = maxAttendees;
	}

	@JSON
	public double getPrice() {
		return _price;
	}

	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	public long getThumbnailId() {
		return _thumbnailId;
	}

	public void setThumbnailId(long thumbnailId) {
		_thumbnailId = thumbnailId;
	}

	@JSON
	public String getLatitude() {
		if (_latitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _latitude;
		}
	}

	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@JSON
	public String getLongitude() {
		if (_longitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _longitude;
		}
	}

	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@JSON
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	public void setLocation(String location) {
		_location = location;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public EventEntry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (EventEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		EventEntryImpl eventEntryImpl = new EventEntryImpl();

		eventEntryImpl.setEventEntryId(getEventEntryId());
		eventEntryImpl.setCompanyId(getCompanyId());
		eventEntryImpl.setGroupId(getGroupId());
		eventEntryImpl.setUserId(getUserId());
		eventEntryImpl.setUserName(getUserName());
		eventEntryImpl.setCreateDate(getCreateDate());
		eventEntryImpl.setModifiedDate(getModifiedDate());
		eventEntryImpl.setTitle(getTitle());
		eventEntryImpl.setDescription(getDescription());
		eventEntryImpl.setStartDate(getStartDate());
		eventEntryImpl.setEndDate(getEndDate());
		eventEntryImpl.setTotalAttendees(getTotalAttendees());
		eventEntryImpl.setMaxAttendees(getMaxAttendees());
		eventEntryImpl.setPrice(getPrice());
		eventEntryImpl.setThumbnailId(getThumbnailId());
		eventEntryImpl.setLatitude(getLatitude());
		eventEntryImpl.setLongitude(getLongitude());
		eventEntryImpl.setLocation(getLocation());

		eventEntryImpl.resetOriginalValues();

		return eventEntryImpl;
	}

	public int compareTo(EventEntry eventEntry) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), eventEntry.getStartDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EventEntry eventEntry = null;

		try {
			eventEntry = (EventEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = eventEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventEntryModelImpl eventEntryModelImpl = this;

		eventEntryModelImpl._originalEventEntryId = eventEntryModelImpl._eventEntryId;

		eventEntryModelImpl._setOriginalEventEntryId = false;

		eventEntryModelImpl._originalCompanyId = eventEntryModelImpl._companyId;

		eventEntryModelImpl._setOriginalCompanyId = false;

		eventEntryModelImpl._originalGroupId = eventEntryModelImpl._groupId;

		eventEntryModelImpl._setOriginalGroupId = false;

		eventEntryModelImpl._originalUserId = eventEntryModelImpl._userId;

		eventEntryModelImpl._setOriginalUserId = false;

		eventEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventEntry> toCacheModel() {
		EventEntryCacheModel eventEntryCacheModel = new EventEntryCacheModel();

		eventEntryCacheModel.eventEntryId = getEventEntryId();

		eventEntryCacheModel.companyId = getCompanyId();

		eventEntryCacheModel.groupId = getGroupId();

		eventEntryCacheModel.userId = getUserId();

		eventEntryCacheModel.userName = getUserName();

		String userName = eventEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			eventEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventEntryCacheModel.title = getTitle();

		String title = eventEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			eventEntryCacheModel.title = null;
		}

		eventEntryCacheModel.description = getDescription();

		String description = eventEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventEntryCacheModel.description = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			eventEntryCacheModel.startDate = startDate.getTime();
		}
		else {
			eventEntryCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			eventEntryCacheModel.endDate = endDate.getTime();
		}
		else {
			eventEntryCacheModel.endDate = Long.MIN_VALUE;
		}

		eventEntryCacheModel.totalAttendees = getTotalAttendees();

		eventEntryCacheModel.maxAttendees = getMaxAttendees();

		eventEntryCacheModel.price = getPrice();

		eventEntryCacheModel.thumbnailId = getThumbnailId();

		eventEntryCacheModel.latitude = getLatitude();

		String latitude = eventEntryCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			eventEntryCacheModel.latitude = null;
		}

		eventEntryCacheModel.longitude = getLongitude();

		String longitude = eventEntryCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			eventEntryCacheModel.longitude = null;
		}

		eventEntryCacheModel.location = getLocation();

		String location = eventEntryCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			eventEntryCacheModel.location = null;
		}

		return eventEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{eventEntryId=");
		sb.append(getEventEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", totalAttendees=");
		sb.append(getTotalAttendees());
		sb.append(", maxAttendees=");
		sb.append(getMaxAttendees());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", thumbnailId=");
		sb.append(getThumbnailId());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("org.lsp.liferay.portlet.socialliving.model.EventEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventEntryId</column-name><column-value><![CDATA[");
		sb.append(getEventEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAttendees</column-name><column-value><![CDATA[");
		sb.append(getTotalAttendees());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxAttendees</column-name><column-value><![CDATA[");
		sb.append(getMaxAttendees());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thumbnailId</column-name><column-value><![CDATA[");
		sb.append(getThumbnailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			EventEntry.class
		};
	private long _eventEntryId;
	private long _originalEventEntryId;
	private boolean _setOriginalEventEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _title;
	private String _description;
	private Date _startDate;
	private Date _endDate;
	private int _totalAttendees;
	private int _maxAttendees;
	private double _price;
	private long _thumbnailId;
	private String _latitude;
	private String _longitude;
	private String _location;
	private long _columnBitmask;
	private EventEntry _escapedModelProxy;
}