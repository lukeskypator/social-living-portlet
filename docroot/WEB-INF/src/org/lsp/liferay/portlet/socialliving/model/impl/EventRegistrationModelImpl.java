/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lsp.liferay.portlet.socialliving.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lsp.liferay.portlet.socialliving.model.EventRegistration;
import org.lsp.liferay.portlet.socialliving.model.EventRegistrationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EventRegistration service. Represents a row in the &quot;LSPSL_EventRegistration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lsp.liferay.portlet.socialliving.model.EventRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventRegistrationImpl
 * @see org.lsp.liferay.portlet.socialliving.model.EventRegistration
 * @see org.lsp.liferay.portlet.socialliving.model.EventRegistrationModel
 * @generated
 */
public class EventRegistrationModelImpl extends BaseModelImpl<EventRegistration>
	implements EventRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event registration model instance should use the {@link org.lsp.liferay.portlet.socialliving.model.EventRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "LSPSL_EventRegistration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventRegistrationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventEntryId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LSPSL_EventRegistration (eventRegistrationId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,eventEntryId LONG,status INTEGER,comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LSPSL_EventRegistration";
	public static final String ORDER_BY_JPQL = " ORDER BY eventRegistration.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY LSPSL_EventRegistration.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lsp.liferay.portlet.socialliving.model.EventRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lsp.liferay.portlet.socialliving.model.EventRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lsp.liferay.portlet.socialliving.model.EventRegistration"),
			true);
	public static long EVENTENTRYID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lsp.liferay.portlet.socialliving.model.EventRegistration"));

	public EventRegistrationModelImpl() {
	}

	public long getPrimaryKey() {
		return _eventRegistrationId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEventRegistrationId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eventRegistrationId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return EventRegistration.class;
	}

	public String getModelClassName() {
		return EventRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventRegistrationId", getEventRegistrationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventEntryId", getEventEntryId());
		attributes.put("status", getStatus());
		attributes.put("comments", getComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventRegistrationId = (Long)attributes.get("eventRegistrationId");

		if (eventRegistrationId != null) {
			setEventRegistrationId(eventRegistrationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long eventEntryId = (Long)attributes.get("eventEntryId");

		if (eventEntryId != null) {
			setEventEntryId(eventEntryId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	public long getEventRegistrationId() {
		return _eventRegistrationId;
	}

	public void setEventRegistrationId(long eventRegistrationId) {
		_eventRegistrationId = eventRegistrationId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public long getEventEntryId() {
		return _eventEntryId;
	}

	public void setEventEntryId(long eventEntryId) {
		_columnBitmask |= EVENTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalEventEntryId) {
			_setOriginalEventEntryId = true;

			_originalEventEntryId = _eventEntryId;
		}

		_eventEntryId = eventEntryId;
	}

	public long getOriginalEventEntryId() {
		return _originalEventEntryId;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public EventRegistration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (EventRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		EventRegistrationImpl eventRegistrationImpl = new EventRegistrationImpl();

		eventRegistrationImpl.setEventRegistrationId(getEventRegistrationId());
		eventRegistrationImpl.setCompanyId(getCompanyId());
		eventRegistrationImpl.setGroupId(getGroupId());
		eventRegistrationImpl.setUserId(getUserId());
		eventRegistrationImpl.setUserName(getUserName());
		eventRegistrationImpl.setCreateDate(getCreateDate());
		eventRegistrationImpl.setModifiedDate(getModifiedDate());
		eventRegistrationImpl.setEventEntryId(getEventEntryId());
		eventRegistrationImpl.setStatus(getStatus());
		eventRegistrationImpl.setComments(getComments());

		eventRegistrationImpl.resetOriginalValues();

		return eventRegistrationImpl;
	}

	public int compareTo(EventRegistration eventRegistration) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				eventRegistration.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EventRegistration eventRegistration = null;

		try {
			eventRegistration = (EventRegistration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = eventRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventRegistrationModelImpl eventRegistrationModelImpl = this;

		eventRegistrationModelImpl._originalUserId = eventRegistrationModelImpl._userId;

		eventRegistrationModelImpl._setOriginalUserId = false;

		eventRegistrationModelImpl._originalEventEntryId = eventRegistrationModelImpl._eventEntryId;

		eventRegistrationModelImpl._setOriginalEventEntryId = false;

		eventRegistrationModelImpl._originalStatus = eventRegistrationModelImpl._status;

		eventRegistrationModelImpl._setOriginalStatus = false;

		eventRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventRegistration> toCacheModel() {
		EventRegistrationCacheModel eventRegistrationCacheModel = new EventRegistrationCacheModel();

		eventRegistrationCacheModel.eventRegistrationId = getEventRegistrationId();

		eventRegistrationCacheModel.companyId = getCompanyId();

		eventRegistrationCacheModel.groupId = getGroupId();

		eventRegistrationCacheModel.userId = getUserId();

		eventRegistrationCacheModel.userName = getUserName();

		String userName = eventRegistrationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventRegistrationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventRegistrationCacheModel.createDate = createDate.getTime();
		}
		else {
			eventRegistrationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventRegistrationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventRegistrationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventRegistrationCacheModel.eventEntryId = getEventEntryId();

		eventRegistrationCacheModel.status = getStatus();

		eventRegistrationCacheModel.comments = getComments();

		String comments = eventRegistrationCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			eventRegistrationCacheModel.comments = null;
		}

		return eventRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{eventRegistrationId=");
		sb.append(getEventRegistrationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventEntryId=");
		sb.append(getEventEntryId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"org.lsp.liferay.portlet.socialliving.model.EventRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventRegistrationId</column-name><column-value><![CDATA[");
		sb.append(getEventRegistrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventEntryId</column-name><column-value><![CDATA[");
		sb.append(getEventEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventRegistration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			EventRegistration.class
		};
	private long _eventRegistrationId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _eventEntryId;
	private long _originalEventEntryId;
	private boolean _setOriginalEventEntryId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _comments;
	private long _columnBitmask;
	private EventRegistration _escapedModelProxy;
}